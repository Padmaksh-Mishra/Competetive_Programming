{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "cpi",
		"body": [
			"//Coding_Duck <-> PM <-> REDACTED\n",
			"# include <bits/stdc++.h>",
			"# define ll long long",
			"# define endl '\\n'",
			"# define deb(x) cout << #x << \" = \" << x << endl",
			"",
			"const ll MOD = 1e9 +7;\nusing namespace std;\n", 
			"int bexpo(int n,int p);",
			"",
			"void solve(){",
			"\t$1",
			"}\n",
			"int main(){",
			"\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tcout.tie(NULL); // useless since cout is not tied to anything\n",
			"\tint TC = 1;",
			"\tcin >> TC;",
			"\twhile(TC--){",
			"\t\tsolve();",
			"\t}\n\treturn 0;",
			"}\n",
			"",
			"//Binary Exponention Iterative", 
			"int bexpo(int n,int p){ ",
			"\tint ans = 1,tmp = n;",
			"\twhile(p>0){",
			"\t\tif(p&1) ans = (ans * 1LL * tmp)%MOD;",       
			"\t\ttmp = (tmp * 1LL * tmp)%MOD;",
			"\t\tp>>=1;",
			"\t}",
			"\treturn ans;",
			"}",
			"",
		],
		"description": "Competetive programming"
	}
}